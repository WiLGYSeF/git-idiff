{
    "gitfiles": [
        {
            "filename": "__main__.py",
            "old_filename": null,
            "insertions": 3,
            "deletions": 4,
            "headers": [
                "diff --git a/__main__.py b/__main__.py",
                "index 07e09c5..d53d5a3 100644",
                "--- a/__main__.py",
                "+++ b/__main__.py"
            ],
            "content": [
                "@@ -1,7 +1,6 @@",
                " #!/usr/bin/env python3",
                " ",
                "-import gui",
                "-from gui import UiCurses",
                "+from ui.cui import CursesUi, curses_initialize",
                " ",
                "-ui = UiCurses()",
                "-gui.initialize(ui)",
                "+cui = CursesUi()",
                "+curses_initialize(cui)"
            ],
            "status": "M",
            "score": 0
        },
        {
            "filename": "ui/__init__.py",
            "old_filename": null,
            "insertions": 0,
            "deletions": 0,
            "headers": [
                "diff --git a/ui/__init__.py b/ui/__init__.py",
                "new file mode 100644",
                "index 0000000..e69de29"
            ],
            "content": [],
            "status": "A",
            "score": 0
        },
        {
            "filename": "ui/cui.py",
            "old_filename": "gui.py",
            "insertions": 112,
            "deletions": 30,
            "headers": [
                "diff --git a/gui.py b/ui/cui.py",
                "similarity index 9%",
                "rename from gui.py",
                "rename to ui/cui.py",
                "index 0fbacf1..85b272c 100644",
                "--- a/gui.py",
                "+++ b/ui/cui.py"
            ],
            "content": [
                "@@ -2,61 +2,143 @@ import curses",
                " import typing",
                " ",
                " import gitdiff",
                "+from ui.pad import CursesPad",
                "+",
                "+class CursesUi:",
                "+    COLOR_ADD = 1",
                "+    COLOR_REMOVE = 2",
                "+    COLOR_SECTION = 3",
                " ",
                "-class UiCurses:",
                "     def __init__(self):",
                "         self.stdscr = None",
                "         self.filelist_column_width: int = 24",
                " ",
                "-        self.pad_filelist = None",
                "-        self.pad_diff = None",
                "+        self.pad_filelist: typing.Optional[CursesPad] = None",
                "+        self.pad_diff: typing.Optional[CursesPad] = None",
                " ",
                "         self.filelist: gitdiff.FileList = []",
                "+        self.diff_contents: typing.List[str] = []",
                "+",
                "         self.selected_file: typing.Optional[str] = None",
                "+        self.diff_linenum: int = 1",
                " ",
                "-    def start(self, stdscr) -> None:",
                "+    def run(self, stdscr) -> None:",
                "         self.stdscr = stdscr",
                " ",
                "-        self.pad_filelist = curses.newpad(curses.LINES, self.filelist_column_width)",
                "-        self.pad_diff = curses.newpad(curses.LINES, curses.COLS - self.filelist_column_width)",
                "+        curses.curs_set(False)",
                "+",
                "+        curses.use_default_colors()",
                "+        curses.init_pair(CursesUi.COLOR_ADD, curses.COLOR_GREEN, -1)",
                "+        curses.init_pair(CursesUi.COLOR_REMOVE, curses.COLOR_RED, -1)",
                "+        curses.init_pair(CursesUi.COLOR_SECTION, curses.COLOR_CYAN, -1)",
                "+",
                "+        self.pad_filelist = CursesPad(curses,",
                "+            height = curses.LINES,",
                "+            width = self.filelist_column_width,",
                "+            offset_y = 0,",
                "+            offset_x = 0",
                "+        )",
                "+        self.pad_diff = CursesPad(curses,",
                "+            height = curses.LINES,",
                "+            width = curses.COLS - self.filelist_column_width,",
                "+            offset_y = 0,",
                "+            offset_x = self.filelist_column_width",
                "+        )",
                " ",
                "         stdscr.erase()",
                "         stdscr.refresh()",
                " ",
                "-        self.update_filelist(gitdiff.get_filenames())",
                "-        self.update_diff(gitdiff.get_file_diff(self.filelist[0][0]))",
                "+        self.filelist = gitdiff.get_filenames()",
                "+        self.diff_contents = gitdiff.get_file_diff(self.filelist[0][0])",
                " ",
                "-        while True:",
                "-            self.input()",
                "-",
                "-    def input(self) -> None:",
                "-        self.stdscr.getkey()",
                "+        self.update_filelist()",
                "+        self.update_diff()",
                " ",
                "-    def update_filelist(self, filelist: gitdiff.FileList) -> None:",
                "-        self.pad_filelist.erase()",
                "+        while True:",
                "+            c = self.input()",
                "+            if c < 256:",
                "+                ch = chr(c)",
                "+                if ch in 'Qq':",
                "+                    break",
                "+            elif c == curses.KEY_UP:",
                "+                self.pad_diff.scroll(-1, 0)",
                "+            elif c == curses.KEY_DOWN:",
                "+                self.pad_diff.scroll(1, 0)",
                "+            elif c == curses.KEY_LEFT:",
                "+                self.pad_diff.scroll(0, -1)",
                "+            elif c == curses.KEY_RIGHT:",
                "+                self.pad_diff.scroll(0, 1)",
                "+            elif c == curses.KEY_RESIZE:",
                "+                pass",
                "+",
                "+    def input(self) -> int:",
                "+        return self.stdscr.getch()",
                "+",
                "+    def update_filelist(self) -> None:",
                "+        self.pad_filelist.pad.erase()",
                "+",
                "+        max_y, max_x = self.pad_filelist.pad.getmaxyx()",
                "+        if len(self.filelist) >= max_y:",
                "+            self.pad_filelist.pad.resize(len(self.filelist) + 1, max_x)",
                "+",
                "+        # create a right border and decrease max_x to account for it",
                "+        self.pad_filelist.pad.border(",
                "+            ' ', 0, ' ', ' ',",
                "+            ' ', curses.ACS_VLINE, ' ', curses.ACS_VLINE",
                "+        )",
                "+        max_x -= 1",
                " ",
                "         idx = 0",
                "-        for fname, added, removed in filelist:",
                "-            self.pad_filelist.addstr(idx, 0, f'{added} {removed} {fname}')",
                "+        for fname, added, removed in self.filelist:",
                "+            total_length = len(f'{added} {removed} {fname}')",
                "+            length = 0",
                "+",
                "+            if total_length > max_x:",
                "+                fname = '...' + fname[len(fname) - (max_x - total_length) - 3:]",
                "+",
                "+            def write(s, attr=None):",
                "+                nonlocal length",
                "+                self.pad_filelist.pad.addstr(",
                "+                    idx, length,",
                "+                    s,",
                "+                    attr if attr is not None else curses.A_NORMAL",
                "+                )",
                "+                length += len(s)",
                "+",
                "+            write(str(added), curses.color_pair(CursesUi.COLOR_ADD))",
                "+            write(' ')",
                "+            write(str(removed), curses.color_pair(CursesUi.COLOR_REMOVE))",
                "+            write(' ' + fname)",
                "             idx += 1",
                " ",
                "-        self.pad_filelist.refresh(0, 0, 0, 0, curses.LINES, self.filelist_column_width)",
                "+        self.pad_filelist.refresh(0, 0)",
                " ",
                "-        self.filelist = filelist[:]",
                "+    def update_diff(self) -> None:",
                "+        self.pad_diff.pad.erase()",
                " ",
                "-    def update_diff(self, diff: typing.List[str]) -> None:",
                "-        self.pad_diff.erase()",
                "+        max_y, max_x = self.pad_diff.pad.getmaxyx()",
                "+        longest_line = max(( len(line) for line in self.diff_contents ))",
                "+        if len(self.diff_contents) >= max_y or longest_line >= max_x:",
                "+            self.pad_diff.pad.resize(len(self.diff_contents) + 1, max(longest_line + 1, max_x))",
                " ",
                "         idx = 0",
                "-        for line in diff:",
                "-            self.pad_diff.addstr(idx, 0, line)",
                "+        for line in self.diff_contents:",
                "+            if len(line) == 0:",
                "+                idx += 1",
                "+                continue",
                "+",
                "+            attr = None",
                "+            if line[0] == '+':",
                "+                attr = curses.color_pair(CursesUi.COLOR_ADD)",
                "+            elif line[0] == '-':",
                "+                attr = curses.color_pair(CursesUi.COLOR_REMOVE)",
                "+            elif line[0] == '@':",
                "+                attr = curses.color_pair(CursesUi.COLOR_SECTION)",
                "+",
                "+            self.pad_diff.pad.addstr(idx, 0, line, attr if attr is not None else curses.A_NORMAL)",
                "             idx += 1",
                " ",
                "-        self.pad_diff.refresh(",
                "-            0, 0,",
                "-            0, self.filelist_column_width,",
                "-            curses.LINES, curses.COLS - self.filelist_column_width",
                "-        )",
                "+        self.pad_diff.refresh(0, 0)",
                " ",
                "-def initialize(ui: UiCurses) -> None:",
                "-    curses.wrapper(ui.start)",
                "+def curses_initialize(cui: CursesUi) -> None:",
                "+    curses.wrapper(cui.run)"
            ],
            "status": "R",
            "score": 9
        },
        {
            "filename": "ui/pad.py",
            "old_filename": null,
            "insertions": 29,
            "deletions": 0,
            "headers": [
                "diff --git a/ui/pad.py b/ui/pad.py",
                "new file mode 100644",
                "index 0000000..2cebbe1",
                "--- /dev/null",
                "+++ b/ui/pad.py"
            ],
            "content": [
                "@@ -0,0 +1,29 @@",
                "+import curses",
                "+",
                "+class CursesPad:",
                "+    def __init__(self, window, **kwargs):",
                "+        self.height: int = kwargs['height']",
                "+        self.width: int = kwargs['width']",
                "+        self.offset_y: int = kwargs['offset_y']",
                "+        self.offset_x: int = kwargs['offset_x']",
                "+",
                "+        self.pad = window.newpad(self.height, self.width)",
                "+",
                "+        self._y: int = 0",
                "+        self._x: int = 0",
                "+",
                "+    def scroll(self, y: int, x: int) -> None:",
                "+        self.refresh(self._y + y, self._x + x)",
                "+",
                "+    def refresh(self, y: int, x: int) -> None:",
                "+        self._y = clamp(y, 0, self.height - 1)",
                "+        self._x = clamp(x, 0, self.width - 1)",
                "+",
                "+        self.pad.refresh(",
                "+            self._y, self._x,",
                "+            self.offset_y, self.offset_x,",
                "+            min(self.height, curses.LINES) - 1, min(self.width, curses.COLS) - 1",
                "+        )",
                "+",
                "+def clamp(val: int, minval: int, maxval: int) -> int:",
                "+    return max(minval, min(val, maxval))",
                ""
            ],
            "status": "A",
            "score": 0
        }
    ]
}
