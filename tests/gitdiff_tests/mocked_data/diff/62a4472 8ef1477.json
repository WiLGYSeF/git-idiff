{
    "gitfiles": [
        {
            "filename": "__main__.py",
            "old_filename": null,
            "insertions": 10,
            "deletions": 4,
            "headers": [
                "diff --git a/__main__.py b/__main__.py",
                "index 07e09c5..6f37569 100644",
                "--- a/__main__.py",
                "+++ b/__main__.py"
            ],
            "content": [
                "@@ -1,7 +1,13 @@",
                " #!/usr/bin/env python3",
                " ",
                "-import gui",
                "-from gui import UiCurses",
                "+import sys",
                "+import typing",
                " ",
                "-ui = UiCurses()",
                "-gui.initialize(ui)",
                "+from ui.cui import CursesUi, curses_initialize",
                "+",
                "+def main(args: typing.List[str]) -> None:",
                "+    cui = CursesUi(args)",
                "+    curses_initialize(cui)",
                "+",
                "+if __name__ == '__main__':",
                "+    main(sys.argv[1:])"
            ],
            "status": "X"
        },
        {
            "filename": "gitdiff.py",
            "old_filename": null,
            "insertions": 27,
            "deletions": 8,
            "headers": [
                "diff --git a/gitdiff.py b/gitdiff.py",
                "index 11100a0..ea99d09 100644",
                "--- a/gitdiff.py",
                "+++ b/gitdiff.py"
            ],
            "content": [
                "@@ -1,3 +1,4 @@",
                "+import re",
                " import subprocess",
                " import typing",
                " ",
                "@@ -24,25 +25,43 @@ def get_filenames(",
                "         )",
                "     ]",
                " ",
                "-def get_file_diff(fname: str) -> typing.List[str]:",
                "-    output = subprocess.check_output([",
                "-        'git', 'diff', fname",
                "-    ])",
                "+def get_file_diff(",
                "+    fname: str,",
                "+    args: typing.Optional[typing.List[str]] = None",
                "+) -> typing.List[str]:",
                "+    cmdargs = ['git', 'diff']",
                "+    if args is not None:",
                "+        cmdargs.extend(_sanitize_args(args))",
                "+    cmdargs.extend(('--', fname))",
                "+",
                "+    output = subprocess.check_output(cmdargs)",
                "     lines = output.decode('utf-8').split('\\n')",
                "+",
                "+    \"\"\"",
                "     headers = []",
                "     idx = 0",
                " ",
                "-    header_starts =  ['diff ', 'index ', '--- ', '+++ ']",
                "+    headers_regex = re.compile(r'^(diff|index|(new|deleted) file|---|\\+\\+\\+) ')",
                " ",
                "-    while idx < len(header_starts):",
                "-        if not lines[idx].startswith(header_starts[idx]):",
                "+    while idx < len(lines):",
                "+        if headers_regex.search(lines[idx]) is None:",
                "             break",
                "         idx += 1",
                " ",
                "     for _ in range(idx):",
                "         headers.append(lines.pop(0))",
                "+    \"\"\"",
                " ",
                "     return lines",
                " ",
                " def _sanitize_args(args: typing.List[str]) -> typing.List[str]:",
                "-    return list(filter(lambda a: a[0] != '-', args))",
                "+    result = []",
                "+",
                "+    for arg in args:",
                "+        if arg == '--':",
                "+            break",
                "+        if arg[0] == '-':",
                "+            continue",
                "+        result.append(arg)",
                "+",
                "+    return result"
            ],
            "status": "X"
        },
        {
            "filename": "gui.py",
            "old_filename": null,
            "insertions": 0,
            "deletions": 153,
            "headers": [
                "diff --git a/gui.py b/gui.py",
                "deleted file mode 100644",
                "index 42e4af7..0000000",
                "--- a/gui.py",
                "+++ /dev/null"
            ],
            "content": [
                "@@ -1,153 +0,0 @@",
                "-import curses",
                "-import typing",
                "-",
                "-import gitdiff",
                "-",
                "-class UiCurses:",
                "-    COLOR_ADD = 1",
                "-    COLOR_REMOVE = 2",
                "-    COLOR_SECTION = 3",
                "-",
                "-    def __init__(self):",
                "-        self.stdscr = None",
                "-        self.filelist_column_width: int = 24",
                "-",
                "-        self.pad_filelist = None",
                "-        self.pad_filelist_y: int = 0",
                "-        self.pad_filelist_x: int = 0",
                "-",
                "-        self.pad_diff = None",
                "-        self.pad_diff_y: int = 0",
                "-        self.pad_diff_x: int = 0",
                "-",
                "-        self.filelist: gitdiff.FileList = []",
                "-        self.selected_file: typing.Optional[str] = None",
                "-        self.diff_linenum: int = 1",
                "-",
                "-    def start(self, stdscr) -> None:",
                "-        self.stdscr = stdscr",
                "-",
                "-        curses.curs_set(False)",
                "-",
                "-        curses.use_default_colors()",
                "-        curses.init_pair(UiCurses.COLOR_ADD, curses.COLOR_GREEN, -1)",
                "-        curses.init_pair(UiCurses.COLOR_REMOVE, curses.COLOR_RED, -1)",
                "-        curses.init_pair(UiCurses.COLOR_SECTION, curses.COLOR_CYAN, -1)",
                "-",
                "-        self.pad_filelist = curses.newpad(curses.LINES, self.filelist_column_width)",
                "-        self.pad_diff = curses.newpad(curses.LINES, curses.COLS - self.filelist_column_width)",
                "-",
                "-        stdscr.erase()",
                "-        stdscr.refresh()",
                "-",
                "-        self.update_filelist(gitdiff.get_filenames())",
                "-        self.update_diff(gitdiff.get_file_diff(self.filelist[0][0]))",
                "-",
                "-        while True:",
                "-            c = self.input()",
                "-            if c < 256:",
                "-                ch = chr(c)",
                "-                if ch in 'Qq':",
                "-                    break",
                "-            elif c == curses.KEY_UP:",
                "-                self.refresh_diff(self.pad_diff_y - 1, self.pad_diff_x)",
                "-            elif c == curses.KEY_DOWN:",
                "-                self.refresh_diff(self.pad_diff_y + 1, self.pad_diff_x)",
                "-            elif c == curses.KEY_LEFT:",
                "-                self.refresh_diff(self.pad_diff_y, self.pad_diff_x - 1)",
                "-            elif c == curses.KEY_RIGHT:",
                "-                self.refresh_diff(self.pad_diff_y, self.pad_diff_x + 1)",
                "-            elif c == curses.KEY_RESIZE:",
                "-                pass",
                "-",
                "-    def input(self) -> int:",
                "-        return self.stdscr.getch()",
                "-",
                "-    def update_filelist(self, filelist: gitdiff.FileList) -> None:",
                "-        self.pad_filelist.erase()",
                "-",
                "-        max_y, max_x = self.pad_filelist.getmaxyx()",
                "-        if len(filelist) >= max_y:",
                "-            self.pad_filelist.resize(len(filelist) + 1, max_x)",
                "-",
                "-        # create a right border and decrease max_x to account for it",
                "-        self.pad_filelist.border(",
                "-            ' ', 0, ' ', ' ',",
                "-            ' ', curses.ACS_VLINE, ' ', curses.ACS_VLINE",
                "-        )",
                "-        max_x -= 1",
                "-",
                "-        idx = 0",
                "-        for fname, added, removed in filelist:",
                "-            total_length = len(f'{added} {removed} {fname}')",
                "-            length = 0",
                "-",
                "-            if total_length > max_x:",
                "-                fname = '...' + fname[len(fname) - (max_x - total_length) - 3:]",
                "-",
                "-            def write(s, attr=None):",
                "-                nonlocal length",
                "-                self.pad_filelist.addstr(",
                "-                    idx, length,",
                "-                    s,",
                "-                    attr if attr is not None else curses.A_NORMAL",
                "-                )",
                "-                length += len(s)",
                "-",
                "-            write(str(added), curses.color_pair(UiCurses.COLOR_ADD))",
                "-            write(' ')",
                "-            write(str(removed), curses.color_pair(UiCurses.COLOR_REMOVE))",
                "-            write(' ' + fname)",
                "-            idx += 1",
                "-",
                "-        self.refresh_filelist(0, 0)",
                "-        self.filelist = filelist[:]",
                "-",
                "-    def refresh_filelist(self, y: int, x: int) -> None:",
                "-        self.pad_filelist.refresh(",
                "-            y, x,",
                "-            0, 0,",
                "-            curses.LINES - 1, min(self.filelist_column_width, curses.COLS - 1)",
                "-        )",
                "-        self.pad_filelist_y = y",
                "-        self.pad_filelist_x = x",
                "-",
                "-    def update_diff(self, diff: typing.List[str]) -> None:",
                "-        self.pad_diff.erase()",
                "-",
                "-        max_y, max_x = self.pad_diff.getmaxyx()",
                "-        longest_line = max(( len(line) for line in diff ))",
                "-        if len(diff) >= max_y or longest_line >= max_x:",
                "-            self.pad_diff.resize(len(diff) + 1, max(longest_line + 1, max_x))",
                "-",
                "-        idx = 0",
                "-        for line in diff:",
                "-            if len(line) == 0:",
                "-                idx += 1",
                "-                continue",
                "-",
                "-            attr = None",
                "-            if line[0] == '+':",
                "-                attr = curses.color_pair(UiCurses.COLOR_ADD)",
                "-            elif line[0] == '-':",
                "-                attr = curses.color_pair(UiCurses.COLOR_REMOVE)",
                "-            elif line[0] == '@':",
                "-                attr = curses.color_pair(UiCurses.COLOR_SECTION)",
                "-",
                "-            self.pad_diff.addstr(idx, 0, line, attr if attr is not None else curses.A_NORMAL)",
                "-            idx += 1",
                "-",
                "-        self.refresh_diff(0, 0)",
                "-        self.diff_linenum = 1",
                "-",
                "-    def refresh_diff(self, y: int, x: int) -> None:",
                "-        self.pad_diff.refresh(",
                "-            y, x,",
                "-            0, self.filelist_column_width,",
                "-            curses.LINES - 1, curses.COLS - 1",
                "-        )",
                "-        self.pad_diff_y = y",
                "-        self.pad_diff_x = x",
                "-",
                "-def initialize(ui: UiCurses) -> None:",
                "-    curses.wrapper(ui.start)"
            ],
            "status": "X"
        },
        {
            "filename": "ui/__init__.py",
            "old_filename": null,
            "insertions": 0,
            "deletions": 0,
            "headers": [
                "diff --git a/ui/__init__.py b/ui/__init__.py",
                "new file mode 100644",
                "index 0000000..e69de29"
            ],
            "content": [],
            "status": "X"
        },
        {
            "filename": "ui/cui.py",
            "old_filename": null,
            "insertions": 211,
            "deletions": 0,
            "headers": [
                "diff --git a/ui/cui.py b/ui/cui.py",
                "new file mode 100644",
                "index 0000000..f69dc48",
                "--- /dev/null",
                "+++ b/ui/cui.py"
            ],
            "content": [
                "@@ -0,0 +1,211 @@",
                "+import curses",
                "+import typing",
                "+",
                "+import gitdiff",
                "+from ui.pad import CursesPad",
                "+",
                "+class CursesUi:",
                "+    COLOR_ADD = 1",
                "+    COLOR_REMOVE = 2",
                "+    COLOR_SECTION = 3",
                "+",
                "+    def __init__(self, diff_args: typing.Optional[typing.List[str]] = None):",
                "+        self.diff_args: typing.List[str] = diff_args if diff_args is not None else []",
                "+",
                "+        self.stdscr = None",
                "+        self.filelist_column_width: int = 24",
                "+",
                "+        self.pad_filelist: typing.Optional[CursesPad] = None",
                "+        self.pad_diff: typing.Optional[CursesPad] = None",
                "+        self.pad_statusbar: typing.Optional[CursesPad] = None",
                "+",
                "+        self.filelist: gitdiff.FileList = []",
                "+        self.diff_contents: typing.List[str] = []",
                "+",
                "+        self.selected_file: typing.Optional[str] = None",
                "+        self.selected_file_idx: int = -1",
                "+",
                "+    def run(self, stdscr) -> None:",
                "+        self.stdscr = stdscr",
                "+        lines, columns = stdscr.getmaxyx()",
                "+",
                "+        curses.curs_set(False)",
                "+",
                "+        curses.use_default_colors()",
                "+        curses.init_pair(CursesUi.COLOR_ADD, curses.COLOR_GREEN, -1)",
                "+        curses.init_pair(CursesUi.COLOR_REMOVE, curses.COLOR_RED, -1)",
                "+        curses.init_pair(CursesUi.COLOR_SECTION, curses.COLOR_CYAN, -1)",
                "+",
                "+        self.pad_filelist = CursesPad(stdscr,",
                "+            height = lines - 1,",
                "+            width = self.filelist_column_width,",
                "+            offset_y = 0,",
                "+            offset_x = 0",
                "+        )",
                "+        self.pad_diff = CursesPad(stdscr,",
                "+            height = lines - 1,",
                "+            width = columns - self.filelist_column_width,",
                "+            offset_y = 0,",
                "+            offset_x = self.filelist_column_width",
                "+        )",
                "+        self.pad_statusbar = CursesPad(stdscr,",
                "+            height = 2,",
                "+            width = columns,",
                "+            offset_y = lines - 1,",
                "+            offset_x = 0",
                "+        )",
                "+",
                "+        stdscr.erase()",
                "+        stdscr.refresh()",
                "+",
                "+        self.get_files()",
                "+        self._select_file(0)",
                "+",
                "+        while True:",
                "+            c = self.stdscr.getch()",
                "+            if c < 256:",
                "+                ch = chr(c)",
                "+                if ch == 'n':",
                "+                    self.select_next_file()",
                "+                elif ch == 'p':",
                "+                    self.select_prev_file()",
                "+                elif ch == 'q':",
                "+                    break",
                "+            elif c == curses.KEY_UP:",
                "+                self.pad_diff.scroll(-1, 0)",
                "+            elif c == curses.KEY_DOWN:",
                "+                self.pad_diff.scroll(1, 0)",
                "+            elif c == curses.KEY_LEFT:",
                "+                self.pad_diff.scroll(0, -1)",
                "+            elif c == curses.KEY_RIGHT:",
                "+                self.pad_diff.scroll(0, 1)",
                "+            elif c == curses.KEY_RESIZE:",
                "+                pass",
                "+",
                "+            self.update_statusbar()",
                "+",
                "+    def get_files(self) -> None:",
                "+        self.filelist = gitdiff.get_filenames(self.diff_args)",
                "+        self.update_filelist()",
                "+        self.update_statusbar()",
                "+",
                "+    def select_next_file(self) -> bool:",
                "+        if self.selected_file_idx == len(self.filelist) - 1:",
                "+            return False",
                "+        self._select_file(self.selected_file_idx + 1)",
                "+        return True",
                "+",
                "+    def select_prev_file(self) -> bool:",
                "+        if self.selected_file_idx == 0:",
                "+            return False",
                "+        self._select_file(self.selected_file_idx - 1)",
                "+        return True",
                "+",
                "+    def _select_file(self, idx: int) -> None:",
                "+        self.selected_file_idx = idx",
                "+        self.selected_file = self.filelist[self.selected_file_idx][0]",
                "+",
                "+        self.get_file_diff()",
                "+",
                "+        self.update_filelist()",
                "+        self.update_diff()",
                "+        self.update_statusbar()",
                "+",
                "+    def get_file_diff(self) -> None:",
                "+        self.diff_contents = gitdiff.get_file_diff(self.selected_file, self.diff_args)",
                "+",
                "+    def update_filelist(self) -> None:",
                "+        self.pad_filelist.pad.erase()",
                "+",
                "+        max_y, max_x = self.pad_filelist.pad.getmaxyx()",
                "+        if len(self.filelist) >= max_y:",
                "+            self.pad_filelist.pad.resize(len(self.filelist) + 1, max_x)",
                "+",
                "+        # create a right border and decrease max_x to account for it",
                "+        self.pad_filelist.pad.border(",
                "+            ' ', 0, ' ', ' ',",
                "+            ' ', curses.ACS_VLINE, ' ', curses.ACS_VLINE",
                "+        )",
                "+        max_x -= 1",
                "+",
                "+        idx = 0",
                "+        for fname, added, removed in self.filelist:",
                "+            total_length = len(f'{added} {removed} {fname}')",
                "+            length = 0",
                "+",
                "+            if total_length > max_x:",
                "+                fname = '...' + fname[len(fname) - (max_x - total_length) - 3:]",
                "+",
                "+            def write(s, attr=curses.A_NORMAL):",
                "+                nonlocal length",
                "+",
                "+                if idx == self.selected_file_idx:",
                "+                    attr |= curses.A_REVERSE",
                "+",
                "+                self.pad_filelist.pad.addstr(idx, length, s, attr)",
                "+                length += len(s)",
                "+",
                "+            write(str(added), curses.color_pair(CursesUi.COLOR_ADD))",
                "+            write(' ')",
                "+            write(str(removed), curses.color_pair(CursesUi.COLOR_REMOVE))",
                "+            write(' ' + fname)",
                "+            write(' ' * (max_x - length))",
                "+            idx += 1",
                "+",
                "+        self.pad_filelist.refresh(0, 0)",
                "+",
                "+    def update_diff(self) -> None:",
                "+        self.pad_diff.pad.erase()",
                "+",
                "+        max_y, max_x = self.pad_diff.pad.getmaxyx()",
                "+        longest_line = max(( len(line) for line in self.diff_contents ))",
                "+        if len(self.diff_contents) >= max_y or longest_line >= max_x:",
                "+            self.pad_diff.pad.resize(len(self.diff_contents) + 1, max(longest_line + 1, max_x))",
                "+",
                "+        idx = 0",
                "+        for line in self.diff_contents:",
                "+            if len(line) == 0:",
                "+                idx += 1",
                "+                continue",
                "+",
                "+            attr = curses.A_NORMAL",
                "+            if line[0] == '+':",
                "+                attr = curses.color_pair(CursesUi.COLOR_ADD)",
                "+            elif line[0] == '-':",
                "+                attr = curses.color_pair(CursesUi.COLOR_REMOVE)",
                "+            elif line[0] == '@':",
                "+                attr = curses.color_pair(CursesUi.COLOR_SECTION)",
                "+",
                "+            self.pad_diff.pad.addstr(idx, 0, line, attr)",
                "+            idx += 1",
                "+",
                "+        self.pad_diff.refresh(0, 0)",
                "+",
                "+    def update_statusbar(self) -> None:",
                "+        self.pad_statusbar.pad.erase()",
                "+",
                "+        _, max_x = self.pad_statusbar.pad.getmaxyx()",
                "+",
                "+        diff_linenum = min(len(self.diff_contents), self.pad_diff.height + self.pad_diff.y)",
                "+",
                "+        leftstring = f' {self.selected_file_idx + 1} / {len(self.filelist)} files'",
                "+        centerstring = ' '",
                "+        rightstring = f'line {diff_linenum} / {len(self.diff_contents)} '",
                "+",
                "+        leftcenter_pad = ' ' * (",
                "+            (max_x - (len(leftstring) + len(centerstring) + len(rightstring))) // 2",
                "+        )",
                "+        centerright_pad = ' ' * (",
                "+            max_x - (len(leftstring) + len(centerstring) + len(rightstring) + len(leftcenter_pad))",
                "+        )",
                "+",
                "+        self.pad_statusbar.pad.addstr(",
                "+            0, 0,",
                "+            (leftstring + leftcenter_pad + centerstring + centerright_pad + rightstring)[:max_x],",
                "+            curses.A_REVERSE",
                "+        )",
                "+",
                "+        self.pad_statusbar.refresh(0, 0)",
                "+",
                "+def curses_initialize(cui: CursesUi) -> None:",
                "+    curses.wrapper(cui.run)"
            ],
            "status": "X"
        },
        {
            "filename": "ui/pad.py",
            "old_filename": null,
            "insertions": 41,
            "deletions": 0,
            "headers": [
                "diff --git a/ui/pad.py b/ui/pad.py",
                "new file mode 100644",
                "index 0000000..876d759",
                "--- /dev/null",
                "+++ b/ui/pad.py"
            ],
            "content": [
                "@@ -0,0 +1,41 @@",
                "+import curses",
                "+",
                "+class CursesPad:",
                "+    def __init__(self, window, **kwargs):",
                "+        self.window = window",
                "+        self.height: int = kwargs['height']",
                "+        self.width: int = kwargs['width']",
                "+        self.offset_y: int = kwargs['offset_y']",
                "+        self.offset_x: int = kwargs['offset_x']",
                "+",
                "+        self.pad = curses.newpad(self.height, self.width)",
                "+",
                "+        self._y: int = 0",
                "+        self._x: int = 0",
                "+",
                "+    @property",
                "+    def x(self):",
                "+        return self._x",
                "+",
                "+    @property",
                "+    def y(self):",
                "+        return self._y",
                "+",
                "+    def scroll(self, offy: int, offx: int) -> None:",
                "+        self.refresh(self._y + offy, self._x + offx)",
                "+",
                "+    def refresh(self, y: int, x: int) -> None:",
                "+        max_y, max_x = self.window.getmaxyx()",
                "+",
                "+        self._y = _clamp(y, 0, self.height - 1)",
                "+        self._x = _clamp(x, 0, self.width - 1)",
                "+",
                "+        self.pad.refresh(",
                "+            self._y, self._x,",
                "+            self.offset_y, self.offset_x,",
                "+            min(self.height + self.offset_y, max_y) - 1,",
                "+            min(self.width + self.offset_x, max_x) - 1",
                "+        )",
                "+",
                "+def _clamp(val: int, minval: int, maxval: int) -> int:",
                "+    return max(minval, min(val, maxval))",
                ""
            ],
            "status": "X"
        }
    ]
}
